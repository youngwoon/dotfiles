scriptencoding utf-8

"""""""""""""""""""""""""""
" 0. Load Plugin
"""""""""""""""""""""""""""

" All the vim plugins, powered by 'vim-plug', are
" listed up in the separate file 'plugins.vim'.
" It is for making this vimrc could also work out-of-box
" even if not managed by dotfiles.
if filereadable(expand("\~/.vim/plugins.vim"))
    source \~/.vim/plugins.vim
endif

"""""""""""""""""""""""""""
" 1. General Settings
"""""""""""""""""""""""""""

syntax on
set nocompatible

" use path '~/.vim' even on non-unix machine
set runtimepath+=~/.vim

" load plugins with pathogen
try
    runtime bundle/vim-pathogen/autoload/pathogen.vim
    call pathogen#infect()
catch
endtry

" basic displays
set number                  " show line numbers
set ruler

" input settings
set bs=indent,eol,start     " allow backspaces over everything
set autoindent
set smartindent
set pastetoggle=<F8>

"set nowrap
set textwidth=0             " disable automatic line breaking
set cursorline

" tab settings
set tabstop=4
set shiftwidth=4
set softtabstop=4

" tab navigation
set showtabline=2           " always show tab pannel

set scrolloff=3

" search
set ignorecase              " case-insensitive by default
set smartcase               " case-sensitive if keyword contains both uppercase and lowercase
set incsearch
set hlsearch

" use spaces for tabbing, by default
set expandtab

" listchars for whitespaces
set list
set listchars=tab:»\ ,trail:·,extends:>,precedes:<

" wildmenu settings
set wildmenu
set wildmode=list:longest,full
set wildignore=*.swp,*.swo,*.class

" status line
set laststatus=2            " show anytime


" native customized statusline, if airline is not available
" (this setting will be replaced afterwards by airline)
set statusline=%1*%{winnr()}\ %*%<\ %f\ %h%m%r%=%l,%c%V\ (%P)

" mouse behaviour
set mouse=nvc
if ! has('nvim')
    " vim only (not in neovim)
    set ttymouse=xterm2
endif


" encoding and line ending settings
set encoding=utf-8
set fileencodings=utf-8,cp949,latin1
set fileformats=unix,dos

" split and autocomplete settings
set splitbelow                              " preview window at bottom
set completeopt=menuone,preview,longest     " show preview and pop-up menu


" no fucking swap and backup files
set noswapfile
set nobackup

" miscellanious
set showmode
set showcmd

set visualbell
set history=1000
set undolevels=1000
set lazyredraw              " no redrawing during macro execution

set mps+=<:>

" when launching files via quickfix, CtrlP, or something else,
" first switch to existing tab (if any) that contains the target buffer,
" or open a new buffer by splitting window in the current tab otherwise.
set switchbuf+=usetab,split

" diff: ignore whitespaces
"set diffopt+=hiddenoff

" jump to the last position when reopening a file
if has("autocmd")
  let s:last_position_disable_filetypes = ['gitcommit']
  au BufReadPost * if index(s:last_position_disable_filetypes, &ft) < 0 && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"zz" | endif
endif

" use strong encryption
if ! has('nvim')
    if v:version == 704 && has('patch399')
        set cryptmethod=blowfish2 " Requires >= 7.4.399
    else
        set cryptmethod=blowfish
    endif
endif

" abbreiviation
ab ipdb import ipdb; ipdb.set_trace()


""""""""""""""""""""""""""""""""
" 2. Key and Functional Mappings
""""""""""""""""""""""""""""""""

" the leader key
let mapleader=","           " comma is the <Leader> key.

" navigation key mapping
map k gk
map j gj
sunmap k
sunmap j

nmap <up> gk
nmap <down> gj

inoremap <up> <c-\><c-o>gk
inoremap <down> <c-\><c-o>gj

" Ignore errornous input in Mac OS X
imap <D-space> <Nop>

" <Ctrl-Space> invokes <C-X><C-O> (omni-completion)
inoremap <C-Space> <C-x><C-o>
inoremap <C-@> <C-x><C-o>

" window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

if has('nvim')
    " workaround for <c-h> mapping bug in neovim
    " @see https://github.com/neovim/neovim/issues/2048
    nmap <BS> <C-W>h
endif

" Tab navigations
nnoremap <C-t>     :tabnew<CR>
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>

" Alternative tab navigations (@seealso gt, gT)
" (terminals might capture <Ctrl-t> or something else)
nnoremap <leader>tn  :tabnext<CR>
nnoremap <leader>tp  :tabprev<CR>
nnoremap <leader>tt  :tabnew<CR>

" Handy tab navigations: <Alt-num>
" nnoremap  1gt
" nnoremap  2gt
" nnoremap  3gt
" nnoremap  4gt
" nnoremap  5gt
" nnoremap  6gt
" nnoremap  7gt
" nnoremap  8gt
" nnoremap  9gt

" do not exit from visual mode when shifting
" (gv : select the preivous area)
vnoremap < <gv
vnoremap > >gv


" [F5] Make and Build
" smartly dispatch according to filetype
function! s:run_make(bang)
    let l:silent_filetypes = ['tex', 'pandoc', 'lilypond']
    " (1) bang given, force background
    if a:bang == "!" | Make!
    " (2) for specified filetypes, use background
    elseif index(l:silent_filetypes, &filetype) >= 0 | Make!
    " (3) otherwise, make with foreground shown
    else | Make
    end
endfunction
command! -nargs=0 -bang RunMake call s:run_make("<bang>")

" A handy way to set makeprg.
command! -nargs=1 Makeprg let &g:makeprg="<args>" | echo "makeprg = <args>"

if isdirectory(expand("~/.vim/plugged/vim-dispatch"))
    " use vim-dispatch if exists

    " <F5>: run make, asynchronously or split windows (dispatch)
    map  <F5> <ESC>:w<CR>:RunMake<CR>
    imap <F5> <ESC>:w<CR>:RunMake<CR>a

    " <leader-F5>: run make with visible progress (split window in tmux)
    map  <leader><F5> <ESC>:w<CR>:RunMake!<CR>

    " <F6>: show quickfix window (scroll bottom)
    map  <F6> :Copen<CR>G
    imap <F6> <ESC>:Copen<CR>G:wincmd w<CR>a
else
    " otherwise, fallback to default make
    map <F5> <ESC>:w<CR>:make!<CR>
    imap <F5> <ESC>:w<CR>:make!<CR>a
endif

" [F4] Next Error [Shift+F4] Previous Error
map <F4> <ESC>:cn<CR>
" map  <ESC>:cp<CR>
map [1;2S <ESC>:cp<CR>
map [29~ <ESC>:cp<CR>

" [F2] save
imap <F2> <ESC>:w<CR>
map <F2> <ESC><ESC>:w<CR>

" Sudo Save (:Wsudo command)
command! Wsudo w !sudo tee % > /dev/null

" handy command-line mode
nnoremap ; :


" Useful leader key combinations {{{

" <leader><space> : turn off search highlight
nmap <leader><space> :noh<CR>

" Plugin ag.vim
" <leader>ag : Ag (search file contents)
nnoremap <leader>ag :Ag! -i ""<Left>

" <leader>cd : switch to the directory of the current buffer
nmap <leader>cd :cd %:p:h<CR>

" <leader>r : screen sucks, redraw everything
nnoremap <leader>r :redraw!<CR>

" <leader>src : source ~/.vimrc
nnoremap <leader>src :source ~/.vimrc<CR>

" <leader>{y,x,p} : {yank,cut,paste} wrt the system clipboard
noremap <leader>y "*y
noremap <leader>x "*x
noremap <leader>p "*p

" <leader>w : save
nnoremap <leader>w :w!<CR>

" <leader>S : Strip trailing whitespaces
command! -nargs=0 Strip call StripTrailingWhitespaces()
nnoremap <leader>S :Strip<CR>

" <leader>df : diffthis
nnoremap <leader>df :diffthis<CR>

" Surround a word with quotes, single quotes, parens, brackets, braces, etc.
"   requires and powered by the plugin surround.vim :-)
" (Note) for visual blocks, use S command from surround.vim
map  <leader>s" ysiw"
map  <leader>s' ysiw'
map  <leader>s` ysiw`
map  <leader>s* ysiw*l
map  <leader>s_ ysiw_l
map  <leader>s~ ysiw~l
map  <leader>s$ ysiw$
map  <leader>s( ysiw(
map  <leader>s) ysiw)
map  <leader>s[ ysiw[
map  <leader>s] ysiw]
map  <leader>s{ ysiw{
map  <leader>s} ysiw}

" Zoom Tmux
map <leader>z :silent exec "!tmux resize-pane -Z"<CR>

" }}}

"""""""""""""""""""""""""""""""""
" 3. Colors, Highlight and Syntax
"""""""""""""""""""""""""""""""""

" color settings
" @see http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html
set t_Co=256                 " use 256 color
set bg=dark

if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    set t_ut=
endif

" apply base theme
silent! colorscheme xoria256

" override more customized colors
highlight StatusLine    ctermfg=LightGreen

highlight LineNr        ctermfg=248 ctermbg=233 guifg=#a8a8a8 guibg=#121212
highlight SignColumn    ctermfg=248 ctermbg=233 guifg=#a8a8a8 guibg=#121212

highlight Normal        ctermfg=255 guifg=white
highlight Comment       ctermfg=035 guifg=#38B04A
highlight Constant      ctermfg=204 guifg=#ff5f87
highlight PreProc       ctermfg=219 guifg=#ffafff
highlight SpecialKey    ctermfg=242 guifg=#666666

" no underline, current cursor line
highlight CursorLine    cterm=none

" show cursorline for active window only
augroup NrHighlight
    autocmd!
    autocmd BufEnter * setlocal cursorline
    autocmd BufLeave * setlocal nocursorline
augroup END

" IDE settings
filetype plugin on
filetype indent on

" filetype detections
au BufRead,BufNewFile /etc/nginx/* if &ft == '' | setfiletype nginx | endif
au BufRead,BufNewFile *.prototxt if &ft == '' | setfiletype yaml | endif

autocmd FileType git setlocal foldlevel=1

" remove trailing whitespaces on save
fun! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType c,cpp,java,javascript,html,ruby,python,pandoc
    \ autocmd BufWritePre <buffer> :call StripTrailingWhitespaces()

" highlight trailing whitespaces
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd FileType GV highlight clear ExtraWhitespace

match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()


" better popup menu colors (instead of dark black)
highlight Pmenu ctermfg=black ctermbg=yellow
highlight PmenuSel ctermfg=red ctermbg=white gui=bold

" http://vim.wikia.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
function! ShowSyntaxGroup()
    echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
        \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
        \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"
endfunction

"""""""""""""""""""""""""""
" 4. GUI Options
"""""""""""""""""""""""""""

" gui settings
if has("gui_running")

    if has("unix")
        let s:uname = substitute(system("uname -s"), '\n', '', '')
    endif

    if has("gui_win32")
        language mes en         " use english messages (korean characters broken)
        set langmenu=none       " use english context menus (korean characters broken)
        set guioptions-=T       " exclude toolbar
        set guioptions-=m       " exclude menubar

        " font setting for windows
        set guifont=Consolas:h11:cANSI
        set guifontwide=GulimChe:h12:cDEFAULT

    elseif has("gui_gtk2")
        " font setting for Ubuntu linux (GTK)
        set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 12

    elseif has("unix") && s:uname == "Darwin"
        " font setting for Mac OS X (Darwin)
        set guifont=Monaco\ for\ Powerline:h12
        set guifontwide=Apple\ SD\ Gothic\ Neo\ UltraLight:h12
    endif

endif


"""""""""""""""""""""""""""
" 5. Plugin Settings
"""""""""""""""""""""""""""

" vim-polyglot {{{

let g:polyglot_disabled = ['python']

" }}}

" vim-startify {{{

let g:startify_bookmarks = [
    \ '~/.vim/vimrc',
    \ '~/.vim/plugins.vim',
    \ ]

let g:startify_skiplist = [
    \ 'COMMIT_EDITMSG',
    \ $VIMRUNTIME .'/doc',
    \ 'plugged/.*/doc',
    \ 'bundle/.*/doc',
    \ ]
" }}}

" Airline {{{
    " use airline, with powerline-ish theme
    let g:airline_theme='bubblegum'
    let g:airline_powerline_fonts=1

    " enable tabline feature
    let g:airline#extensions#tabline#enabled = 1

    " do not display buffers in the tabline if there is only one tab
    let g:airline#extensions#tabline#show_buffers = 0

    " suppress mixed-indent warning for javadoc-like comments (/** */)
    let g:airline#extensions#whitespace#mixed_indent_algo = 1
" }}}

" FZF {{{

" Inside vim, set environment variable FZF_DEFAULT_COMMAND
" so that it can list the files by 'git ls-files' or 'ag'.
if executable("ag")
    let $FZF_DEFAULT_COMMAND = '(git ls-files ":/" || ag -l -g "") | LC_COLLATE=C sort | uniq  2> /dev/null'
endif

" :F is a shortcut for :FZF
command! F FZF

" Invoke FZF Using Ctrl-P
nmap <C-P> :FZF<CR>


" Leader key mappings for vim-fzf commands

" List all open buffers
nnoremap <leader>FB :Buffers<CR>
" Tags in the current buffer (see tagbar)
nnoremap <leader>FT :BTags<CR>
" Git commits
nnoremap <leader>FG :Commits<CR>

" }}}

" CtrlP.vim (deprecated) {{{
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist|bin)|(\.(ico|git|svn))$'

" Default to filename searches (switch: C-D)
let g:ctrlp_by_filename = 1

" }}}

" SuperTab {{{

" Use 'omnicomplete' as the default completion type.
" It may fallback to default keyword completion (<C-P>).
let g:SuperTabDefaultCompletionType = "<C-X><C-O>"

" sometimes we may want to insert tabs or spaces for indentation.
" no tab completion at the start of line or after whitespace.
let g:SuperTabNoCompleteAfter = ['^', '\s']

" }}}

" NerdTree {{{

" change CWD when the NERDtree is first loaded to the directory initialized in
" (e.g. change CWD to the directory hitted by CtrlPZ)
let g:NERDTreeChDirMode = 1

" <Leader>N toggles NERDTree (across tab)
map <Leader>N <plug>NERDTreeTabsToggle<CR>

" Startup Options (do NOT show automatically)
let g:nerdtree_tabs_open_on_console_startup = 0
let g:nerdtree_tabs_open_on_gui_startup = 0

" filter out some files, by extension
let NERDTreeIgnore = ['\.pyc$', '\.class$', '\.o$']

" }}}

" Voom {{{

let g:voom_ft_modes = {'pandoc': 'markdown', 'tex': 'latex'}

nnoremap <leader>V :VoomToggle<CR>

" }}}

" Easymotion {{{

" Trigger <,f> to launch easymotion global jump
nmap <leader>f <Plug>(easymotion-s)

" backward, forward search may mapped to easymotion.
"map  / <Plug>(easymotion-sn)
"omap / <Plug>(easymotion-tn)

" Jump to first match, by Enter or Space
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1

" }}}

" vim-easy-align {{{

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" }}}

" UltiSnips {{
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" }}}

" vim-snippets {{{
let g:snips_author="Youngwoon Lee"
let g:snips_email="lywoon89@gmail.com"
let g:snips_github="youngwoon"
" }}}

" vim-pandoc {{{

" disable automatic folding
let g:pandoc#modules#disabled = ["folding"]

" disable conceals
let g:pandoc#syntax#conceal#use = 0

" disable spell check
let g:pandoc#spell#enabled = 0

" }}}

" vim-javacomplete2 {{{
autocmd FileType java setlocal omnifunc=javacomplete#Complete
" }}}

" python {{{

" heavenshell/vim-pydocstring
" Change default keymapping to <C-_> (default is <C-l>)
nmap <silent> <C-_> <Plug>(pydocstring)

" :Lint shortcut for :PymodeLint
command! -nargs=0 Lint PymodeLint

" disable code folding by default
let g:pymode_folding = 0

" disable rope (terribly slow), in favor of jedi-vim
let g:pymode_rope = 0

" prefer jedi's <leader>r (rename), instead of run
" however, jedi resets all the highlight :( - why?
let g:pymode_run = 0

" Use ipython pdb for inserting breakpoints
" one might need to run 'pip install ipdb'
let g:pymode_breakpoint_cmd = 'import ipdb; ipdb.set_trace()'

" Check code on every save (not on the fly)
let g:pymode_lint_on_write = 1
let g:pymode_lint_unmodified = 1

" Do NOT open quickfix window when any pymode_lint errors have been found
let g:pymode_lint_cwindow = 0

" Skip some errors and warnings
"  E401 : multiple imports on one line
"  E501 : line too long
let g:pymode_lint_ignore = "E401,E501"


" For neovim, disable jedi's autocompletion behavior but
" enable all the other features (e.g. goto, or refactoring)
" The autocompletion is supported by deoplete-jedi.
if has('nvim')
    " @see https://github.com/zchee/deoplete-jedi/issues/35
    let g:jedi#completions_enabled = 0
endif

" Make jedi's completeopt not to include 'longest',
" to prevent underscore prefix auto-completion (e.g. self.__)
" @see jedi-vim issues #429
let g:jedi#auto_vim_configuration = 0

" Do not automatically add the 'import' statement for 'from ...'
let g:jedi#smart_auto_mappings = 0

" Turn off call signatures temporarily, due to an annoying bug
" @see https://github.com/davidhalter/jedi-vim/issues/257
let g:jedi#show_call_signatures = 0

" make jedi-vim open a new tab instead of switching the current buffer,
" when goto (e.g. goto definition) is performed
let g:jedi#use_tabs_not_buffers = 1

" }}}

" LaTeX {{{
let g:LatexBox_Folding = 1
" }}}

" fugitive {{{

" key mappings
nnoremap <leader>gd :Gvdiff<CR>
nnoremap <leader>gD :Gvdiff HEAD<CR>
nnoremap <leader>gs :Gstatus<CR>:20wincmd +<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gb :Gblame -w<CR>:vertical resize 10<CR>
nnoremap <leader>gci :Gcommit --verbose<CR>

" }}}

" gundo key mappings and options
let g:gundo_right = 1   " show at right
nnoremap <leader>G :GundoToggle<CR>

" tagbar key mappings
nnoremap <leader>T :TagbarToggle<CR>

" deoplete.nvim {{{
let g:deoplete#enable_at_startup = 1
" }}}

"""""""""""""""""""""""""""
" Extra Settings
"""""""""""""""""""""""""""

" Use local vimrc if available
if filereadable(expand("\~/.vimrc.local"))
    source \~/.vimrc.local
endif
